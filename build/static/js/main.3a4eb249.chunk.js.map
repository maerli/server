{"version":3,"sources":["comp/Pedidos.js","comp/Home.js","comp/Sobre.js","comp/Users.js","comp/Produtos.js","comp/Mesas.js","App.js","serviceWorker.js","index.js"],"names":["url","Pedidos","props","state","pedidos","mesas","fetch","req1","req2","json","res1","res2","pedido","spedido","key","id_pedido","nome","push","mesa","smesa","id_mesa","value","this","setState","data","method","headers","body","req","res","console","log","document","querySelector","categoria","preco","descricao","img","JSON","stringify","_insertPedido","Component","Home","main","id","type","onClick","_click","bind","user","localStorage","getIytem","setItem","senha","_signin","_login","Sobre","Users","Produtos","produtos","categorias","produto","sproduto","id_produto","scategoria","id_categoria","_insertProduto","placeholder","className","Mesas","_insertMesa","App","style","styles","app","href","path","exact","component","margin","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UACMA,EAAM,wBACSC,E,YACpB,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,QAAQ,KAAKC,MAAM,MAFhB,E,yNAKAC,MAAMN,EAAM,sB,cAAzBO,E,0BACaD,MAAMN,EAAM,oB,cAAzBQ,E,0BACaD,EAAKE,Q,cAAlBC,E,2BACaF,EAAKC,Q,QAEtB,IAFIE,E,OACAP,EAAU,G,6BACV,EAAcM,EAAlB,+CAAQE,EAAe,QAClBC,EAAU,0BAAMC,IAAKF,EAAOG,WAAlB,IAA+BH,EAAOI,KAAtC,KACdZ,EAAQa,KAAKJ,G,0OAGd,IADIR,EAAQ,G,6BACR,EAAYM,EAAhB,+CAAQO,EAAa,QAChBC,EAAQ,4BAAQL,IAAKI,EAAKE,QAASC,MAAOH,EAAKF,MAAvC,IAA+CE,EAAKF,KAApD,KACZX,EAAMY,KAAKE,G,0OAEZG,KAAKC,SAAS,CAACnB,UAAQC,U,4IAEJmB,G,oGACHlB,MAAMN,EAAM,kBAAkB,CAC7CyB,OAAO,OACPC,QAAQ,CACP,eAAe,mBACf,OAAS,mBAEVC,KAAKH,K,cANFI,E,0BAQYA,EAAInB,Q,OAAhBoB,E,OACJC,QAAQC,IAAIF,G,sEAGZ,IAAIb,EAAOgB,SAASC,cAAc,SAASZ,MACvCa,EAAYF,SAASC,cAAc,cAAcZ,MACjDc,EAAQH,SAASC,cAAc,UAAUZ,MACzCe,EAAYJ,SAASC,cAAc,cAAcZ,MACjDgB,EAAML,SAASC,cAAc,QAAQZ,MAErCG,EAAOc,KAAKC,UAAU,CAACvB,OAAKkB,YAAUC,QAAMC,YAAUC,QAC1Df,KAAKkB,cAAchB,K,+BAGlB,OACC,6BACDF,KAAKnB,MAAME,W,GA/CuBoC,aCChBC,E,YACpB,WAAYxC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACwC,KAAK,6BAClB,2BAAOC,GAAG,OAAOC,KAAK,SADJ,IACc,6BAChC,2BAAOD,GAAG,QAAQC,KAAK,aAAY,6BACnC,2BAAOA,KAAK,SAASC,QAAS,EAAKC,OAAOC,KAAZ,gBAAwB3B,MAAM,aAL5C,E,sJAUb4B,EAAOC,aAAaC,SAAS,Q,kBAC1BF,G,qEAEMjC,G,kEACbkC,aAAaE,QAAQ,OAAOpC,G,oEAEhBiC,EAAKI,G,iFACb7B,EAAOc,KAAKC,UAAU,CAACU,OAAKI,U,mBAChB/C,MAAMN,+BAAgB,CACrCyB,OAAO,OACPC,QAAQ,CACP,eAAe,mBACf,OAAS,mBAEVC,KAAKH,K,cANFI,E,0BAQYA,EAAInB,Q,cACbwC,OACN3B,KAAKgC,QAAQL,GACb3B,KAAKC,SAAS,CAACoB,KAAK,kBAAC,EAAD,S,gFAIrB,IAAIM,EAAOjB,SAASC,cAAc,SAASZ,MACvCgC,EAAQrB,SAASC,cAAc,UAAUZ,MAE7CC,KAAKiC,OAAON,EAAKI,K,+BAGhB,OACC,6BACA/B,KAAKnB,MAAMwC,U,GA1CmBF,aCDbe,E,iLAEnB,OACC,0C,GAHgCf,aCAdgB,E,iLAGnB,OACC,6BACF,+D,GALkChB,aCAdiB,E,YACpB,WAAYxD,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACwD,SAAS,KAAKC,WAAW,MAFtB,E,yNAKAtD,MAAMN,4C,cAAnBO,E,0BACaD,MAAMN,8C,cAAnBQ,E,0BACaD,EAAKE,Q,cAAlBC,E,2BACaF,EAAKC,Q,QAEtB,IAFIE,E,OACAgD,EAAW,G,6BACX,EAAejD,EAAnB,+CAAQmD,EAAgB,QACnBC,EAAW,0BAAMhD,IAAK+C,EAAQE,YAAnB,IAAiCF,EAAQ7C,KAAzC,KACf2C,EAAS1C,KAAK6C,G,0OAGf,IADIF,EAAa,G,6BACb,EAAiBjD,EAArB,+CAAQuB,EAAkB,QACrB8B,EAAa,4BAAQlD,IAAKoB,EAAU+B,aAAc5C,MAAOa,EAAUlB,MAAtD,IAA8DkB,EAAUlB,KAAxE,KACjB4C,EAAW3C,KAAK+C,G,0OAEjB1C,KAAKC,SAAS,CAACoC,WAASC,e,6IAEJpC,G,oGACJlB,MAAMN,wCAAyB,CAC9CyB,OAAO,OACPC,QAAQ,CACP,eAAe,mBACf,OAAS,mBAEVC,KAAKH,K,cANFI,E,0BAQYA,EAAInB,Q,OAAhBoB,E,OACJC,QAAQC,IAAIF,G,sEAGZ,IAAIb,EAAOgB,SAASC,cAAc,SAASZ,MACvCa,EAAYF,SAASC,cAAc,cAAcZ,MACjDc,EAAQH,SAASC,cAAc,UAAUZ,MACzCe,EAAYJ,SAASC,cAAc,cAAcZ,MACjDgB,EAAML,SAASC,cAAc,QAAQZ,MAErCG,EAAOc,KAAKC,UAAU,CAACvB,OAAKkB,YAAUC,QAAMC,YAAUC,QAC1Df,KAAK4C,eAAe1C,K,+BAGnB,OACC,6BACF,2BAAOoB,GAAG,OAAOC,KAAK,OAAOsB,YAAY,SADvC,IACiD,6BACnD,4BAAQvB,GAAG,aACTtB,KAAKnB,MAAMyD,YAEb,2BAAOhB,GAAG,QAAQC,KAAK,OAAOsB,YAAY,aALxC,IAKmD,6BACrD,8BAAUvB,GAAG,YAAYuB,YAAY,oBACrC,2BAAOtB,KAAK,SAASD,GAAG,MAAMvB,MAAM,gBACpC,2BAAO+C,UAAU,+BAA+BvB,KAAK,SAASC,QAASxB,KAAKyB,OAAOC,KAAK1B,MAAOD,MAAM,UACrG,yBAAKuB,GAAG,SACNtB,KAAKnB,MAAMwD,e,GAxDuBlB,aCAjB4B,E,YACpB,WAAYnE,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACE,MAAM,MAFH,E,qMAKDC,MAAMN,yC,cAAlB4B,E,0BACYA,EAAInB,Q,OAEpB,IAFIoB,E,OACAxB,EAAQ,G,6BACR,EAAYwB,EAAhB,+CAAQX,EAAY,QACfC,EAAQ,0BAAML,IAAKI,EAAKE,SAAhB,IAA2BF,EAAKF,KAAhC,KACZX,EAAMY,KAAKE,G,0OAEZG,KAAKC,SAAS,CAAClB,U,gHAEEmB,G,oGACDlB,MAAMN,qCAAsB,CAC3CyB,OAAO,OACPC,QAAQ,CACP,eAAe,mBACf,OAAS,mBAEVC,KAAKH,K,cANFI,E,0BAQYA,EAAInB,Q,OAAhBoB,E,OACJC,QAAQC,IAAIF,G,sEAGZ,IAAIb,EAAOgB,SAASC,cAAc,SAASZ,MACvCG,EAAOc,KAAKC,UAAU,CAACvB,SAC3BM,KAAKgD,YAAY9C,K,+BAGhB,OACC,6BACF,2BAAOoB,GAAG,OAAOC,KAAK,OAAOsB,YAAY,SADvC,IACiD,6BACnD,2BAAOtB,KAAK,SAASC,QAASxB,KAAKyB,OAAOC,KAAK1B,MAAOD,MAAM,WAC5D,yBAAKuB,GAAG,SACNtB,KAAKnB,MAAME,Y,GAtCoBoC,aCWd8B,G,uLAEnB,OACE,yBAAKC,MAAOC,EAAOC,IAAKN,UAAU,OACtC,kBAAC,IAAD,KAEM,4BACH,4BAAI,uBAAGA,UAAU,SAASO,KAAK,KAA3B,SACJ,4BAAI,uBAAGA,KAAK,UAAR,gBACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,aAAR,aACJ,4BAAI,uBAAGA,KAAK,YAAR,aACJ,4BAAI,uBAAGA,KAAK,UAAR,WAGP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWpC,IACxC,kBAAC,IAAD,CAAOkC,KAAK,SAASE,UAAWtB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,SAASE,UAAWT,IAChC,kBAAC,IAAD,CAAOO,KAAK,SAASE,UAAWrB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,YAAYE,UAAWpB,IACnC,kBAAC,IAAD,CAAOkB,KAAK,WAAWE,UAAW7E,W,GArBLwC,cA4B3BgC,EAAS,CACdC,IAAI,CACHK,OAAO,QC/BWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStD,SAASuD,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a4eb249.chunk.js","sourcesContent":["import React,{Component} from 'react';\nconst url = 'http://localhost:4000'\nexport default class Pedidos extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {pedidos:null,mesas:null}\n\t}\n\tasync componentDidMount(){\n\t\tlet req1 = await fetch(url + '/database/pedidos')\n\t\tlet req2 = await fetch(url + '/database/mesas')\n\t\tlet res1 = await req1.json()\n\t\tlet res2 = await req2.json()\n\t\tvar pedidos = []\n\t\tfor(let pedido of res1){\n\t\t\tvar spedido = <span key={pedido.id_pedido}> {pedido.nome} </span>\n\t\t\tpedidos.push(spedido)\n\t\t}\n\t\tvar mesas = []\n\t\tfor(let mesa of res2){\n\t\t\tvar smesa = <option key={mesa.id_mesa} value={mesa.nome}> {mesa.nome} </option>\n\t\t\tmesas.push(smesa)\n\t\t}\n\t\tthis.setState({pedidos,mesas})\n\t}\n\tasync _insertPedido(data){\n\t\tlet req = await fetch(url + '/insert/pedidos',{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t\t'Accept':'aplication/json'\n\t\t\t},\n\t\t\tbody:data\n\t\t})\n\t\tlet res = await req.json()\n\t\tconsole.log(res)\n\t}\n\t_click(){\n\t\tvar nome = document.querySelector('#nome').value\n\t\tvar categoria = document.querySelector('#categoria').value\n\t\tvar preco = document.querySelector('#preco').value\n\t\tvar descricao = document.querySelector('#descricao').value\n\t\tvar img = document.querySelector('#img').value\n\t\t\n\t\tvar data = JSON.stringify({nome,categoria,preco,descricao,img})\n\t\tthis._insertPedido(data)\n\t}\n\trender(){\n\t  return (\n\t   <div>\n\t\t{this.state.mesas}\n\t   </div>\n\t  )\n\t}\n}\n","import React,{Component} from 'react'\nimport Pedidos from './Pedidos'\nconst url = 'http://localhost:4000'\nexport default class Home extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {main:<div>\n\t\t\t<input id=\"user\" type=\"text\" /> <br/>\n\t\t\t<input id=\"senha\" type=\"password\"/><br/>\n\t\t\t<input type=\"button\" onClick={this._click.bind(this)} value=\"entrar\"/>\n\t\t\t</div>\n\t\t}\n\t}\n\tasync _verify(){\n\t\tvar user = localStorage.getIytem(\"user\")\n\t\treturn user\n\t}\n\tasync _signin(nome){\n\t\tlocalStorage.setItem(\"user\",nome)\n\t}\n\tasync _login(user,senha){\n\t\tvar data = JSON.stringify({user,senha})\n\t\tlet req = await fetch(url + '/garcon',{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t\t'Accept':'aplication/json'\n\t\t\t},\n\t\t\tbody:data\n\t\t})\n\t\tlet res = await req.json()\n\t\tif(res.user){\n\t\t\tthis._signin(user)\n\t\t\tthis.setState({main:<Pedidos/>})\n\t\t}\n\t}\n\t_click(){\n\t\tvar user = document.querySelector('#user').value\n\t\tvar senha = document.querySelector('#senha').value\n\t\t\n\t\tthis._login(user,senha)\n\t}\n\trender(){\n\t  return (\n\t   <div>\n\t\t\t{this.state.main}\n\t\t</div>\n\t  )\n}\n}\n","import React,{Component} from 'react';\n\nexport default class Sobre extends Component{\nrender(){\n  return (\n   <div>\n\tSobre\n    </div>\n  )\n}\n}\n","import React,{Component} from 'react';\n\nexport default class Users extends Component{\n\nrender(){\n  return (\n   <div>\n\t<button> Criar Novo Gar√ßon </button>\n    </div>\n  )\n}\n}\n","import React,{Component} from 'react';\nconst url = 'http://localhost:4000'\nexport default class Produtos extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {produtos:null,categorias:null}\n\t}\n\tasync componentDidMount(){\n\t\tlet req1 = await fetch(url + '/database/produtos')\n\t\tlet req2 = await fetch(url + '/database/categorias')\n\t\tlet res1 = await req1.json()\n\t\tlet res2 = await req2.json()\n\t\tvar produtos = []\n\t\tfor(let produto of res1){\n\t\t\tvar sproduto = <span key={produto.id_produto}> {produto.nome} </span>\n\t\t\tprodutos.push(sproduto)\n\t\t}\n\t\tvar categorias = []\n\t\tfor(let categoria of res2){\n\t\t\tvar scategoria = <option key={categoria.id_categoria} value={categoria.nome}> {categoria.nome} </option>\n\t\t\tcategorias.push(scategoria)\n\t\t}\n\t\tthis.setState({produtos,categorias})\n\t}\n\tasync _insertProduto(data){\n\t\tlet req = await fetch(url + '/insert/produtos',{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t\t'Accept':'aplication/json'\n\t\t\t},\n\t\t\tbody:data\n\t\t})\n\t\tlet res = await req.json()\n\t\tconsole.log(res)\n\t}\n\t_click(){\n\t\tvar nome = document.querySelector('#nome').value\n\t\tvar categoria = document.querySelector('#categoria').value\n\t\tvar preco = document.querySelector('#preco').value\n\t\tvar descricao = document.querySelector('#descricao').value\n\t\tvar img = document.querySelector('#img').value\n\t\t\n\t\tvar data = JSON.stringify({nome,categoria,preco,descricao,img})\n\t\tthis._insertProduto(data)\n\t}\n\trender(){\n\t  return (\n\t   <div>\n\t\t<input id=\"nome\" type=\"text\" placeholder=\"nome\" /> <br/>\n\t\t<select id=\"categoria\">\n\t\t\t{this.state.categorias}\n\t\t</select>\n\t\t<input id=\"preco\" type=\"text\" placeholder=\"pre√ßo\" /> <br/>\n\t\t<textarea id=\"descricao\" placeholder=\"Descri√ß√£o\"></textarea>\n\t\t<input type=\"hidden\" id=\"img\" value=\"default.png\"/>\n\t\t<input className=\"btn waves-effect waves-light\" type=\"button\" onClick={this._click.bind(this)} value=\"Criar\"/>\n\t\t<div id=\"mesas\">\n\t\t\t{this.state.produtos}\n\t\t</div>\n\t\t</div>\n\t  )\n\t}\n}\n","import React,{Component} from 'react';\nconst url = 'http://localhost:4000'\nexport default class Mesas extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {mesas:null}\n\t}\n\tasync componentDidMount(){\n\t\tlet req = await fetch(url + '/database/mesas')\n\t\tlet res = await req.json()\n\t\tvar mesas = []\n\t\tfor(let mesa of res){\n\t\t\tvar smesa = <span key={mesa.id_mesa}> {mesa.nome} </span>\n\t\t\tmesas.push(smesa)\n\t\t}\n\t\tthis.setState({mesas})\n\t}\n\tasync _insertMesa(data){\n\t\tlet req = await fetch(url + '/insert/mesas',{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t\t'Accept':'aplication/json'\n\t\t\t},\n\t\t\tbody:data\n\t\t})\n\t\tlet res = await req.json()\n\t\tconsole.log(res)\n\t}\n\t_click(){\n\t\tvar nome = document.querySelector('#nome').value\n\t\tvar data = JSON.stringify({nome})\n\t\tthis._insertMesa(data)\n\t}\n\trender(){\n\t  return (\n\t   <div>\n\t\t<input id=\"nome\" type=\"text\" placeholder=\"nome\" /> <br/>\n\t\t<input type=\"button\" onClick={this._click.bind(this)} value=\"entrar\"/>\n\t\t<div id=\"mesas\">\n\t\t\t{this.state.mesas}\n\t\t</div>\n\t\t</div>\n\t  )\n}\n}\n","import React,{Component} from 'react';\nimport './App.css'\nimport { BrowserRouter,Switch, Route} from 'react-router-dom'\nimport Home from './comp/Home'\nimport Sobre from './comp/Sobre'\nimport Users from './comp/Users'\nimport Produtos from './comp/Produtos'\nimport Pedidos from './comp/Pedidos'\nimport Mesas from './comp/Mesas'\nimport './materialize/css/materialize.min.css'\n\nconst url = 'http://localhost:4000'\n\nexport default class App extends Component{\nrender(){\n  return (\n    <div style={styles.app} className=\"App\">\n<BrowserRouter>\n\n      <ul>\n\t  <li><a className=\"active\" href=\"/\">Home</a></li>\n\t  <li><a href=\"/users\">Usu√°rios</a></li>\n\t  <li><a href=\"/mesas\">Mesas</a></li>\n\t  <li><a href=\"/produtos\">Produtos</a></li>\n\t  <li><a href=\"/pedidos\"> Pedidos</a></li>\n\t  <li><a href=\"/sobre\">Sobre</a></li>\n\t</ul>\n\n<Switch>\n    <Route path=\"/\" exact={true} component={Home} />\n    <Route path=\"/sobre\" component={Sobre} />\n    <Route path=\"/mesas\" component={Mesas} />\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/produtos\" component={Produtos} />\n    <Route path=\"/pedidos\" component={Pedidos} />\n</Switch> \n</BrowserRouter>\n\t</div>\n  )\n}\n}\nconst styles = {\n\tapp:{\n\t\tmargin:'5px'\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}